networks:
  skynet:

volumes:
  influxdb_data:
  grafana_data:

services:
  influxdb:
    image: influxdb
    container_name: influxdb
    networks:
      - skynet
    ports:
      - "8086:8086"
    volumes:
      - influxdb_data:/var/lib/influxdb2
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8086" ]
      interval: 30s
      timeout: 10s
      retries: 5
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: admin
      DOCKER_INFLUXDB_INIT_PASSWORD: 637Ue57CJ!CL
      DOCKER_INFLUXDB_INIT_ORG: temp-monitor-org
      DOCKER_INFLUXDB_INIT_BUCKET: temp-monitor-bucket
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: WkoTClqWxUZ_zCoUn3RZsMNVehVG8MeYFy_R9yaBUEbwmxgAxvJVdIkMdHJhVmXqoJ6jJxWAJXoA3sPWgMPxKQ==
    

  grafana:
    image: grafana/grafana
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    networks:
      - skynet
    links:
      - influxdb
    volumes:
      - grafana_data:/var/lib/grafana
      - ./provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=m327Di#*5*sb

  monitor:
    image: monitor
    container_name: monitor
    devices:
      - /dev/gpiomem:/dev/gpiomem
    build: ./monitor
    restart: on-failure
    networks:
      - skynet
    links:
      - influxdb
    depends_on:
      - grafana
      - influxdb
    environment:
      INFLUXDB_TOKEN: WkoTClqWxUZ_zCoUn3RZsMNVehVG8MeYFy_R9yaBUEbwmxgAxvJVdIkMdHJhVmXqoJ6jJxWAJXoA3sPWgMPxKQ==
      INFLUXDB_BUCKET: temp-monitor-bucket
      INFLUXDB_ORG: temp-monitor-org

  speedtest:
    build: ./speedtest
    image: speedtest:latest
    container_name: speedtest
    networks:
      - skynet
    depends_on:
      influxdb:
        condition: service_healthy
    environment:
      INFLUXDB_TOKEN: WkoTClqWxUZ_zCoUn3RZsMNVehVG8MeYFy_R9yaBUEbwmxgAxvJVdIkMdHJhVmXqoJ6jJxWAJXoA3sPWgMPxKQ==
      INFLUXDB_BUCKET: temp-monitor-bucket
      INFLUXDB_ORG: temp-monitor-org
      SPEEDTEST_INTERVAL: 300        # Interval in seconds (e.g., 300s = 5 minutes)
      INFLUXDB_URL: http://influxdb:8086
    restart: on-failure

  nmap_monitor:
    build: ./nmap     # Path to your Nmap Python project's Dockerfile
    image: nmap_monitor:latest  # Name/tag for the built image
    container_name: nmap_monitor
    network_mode: "host"
    depends_on:
      influxdb:
        condition: service_healthy
    environment:
      INFLUXDB_TOKEN: WkoTClqWxUZ_zCoUn3RZsMNVehVG8MeYFy_R9yaBUEbwmxgAxvJVdIkMdHJhVmXqoJ6jJxWAJXoA3sPWgMPxKQ==
      INFLUXDB_BUCKET: temp-monitor-bucket
      INFLUXDB_ORG: temp-monitor-org
      INFLUXDB_URL: http://127.0.0.1:8086
      NETWORK_SCAN_INTERVAL: 300   # e.g. 5 minutes
      KNOWN_DEVICES_FILE: known_devices.json
    restart: on-failure

    # Optional: Some nmap features require direct access to the host's network stack.
    # If you need that, uncomment the line below. But you lose container isolation.
    # network_mode: "host"
    
    # Or some setups may need privileged mode for raw packet scanning:
    privileged: true
