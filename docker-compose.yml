networks:
  skynet:

volumes:
  influxdb_data:
  grafana_data:
  pgdata:  # volume to store Postgres data

services:
  influxdb:
    image: influxdb
    container_name: influxdb
    networks:
      - skynet
    ports:
      - "8086:8086"
    volumes:
      - influxdb_data:/var/lib/influxdb2
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8086" ]
      interval: 30s
      timeout: 10s
      retries: 5
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: admin
      DOCKER_INFLUXDB_INIT_PASSWORD: 637Ue57CJ!CL
      DOCKER_INFLUXDB_INIT_ORG: temp-monitor-org
      DOCKER_INFLUXDB_INIT_BUCKET: temp-monitor-bucket
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: WkoTClqWxUZ_zCoUn3RZsMNVehVG8MeYFy_R9yaBUEbwmxgAxvJVdIkMdHJhVmXqoJ6jJxWAJXoA3sPWgMPxKQ==

  grafana:
    image: grafana/grafana
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    networks:
      - skynet
    links:
      - influxdb
    volumes:
      - grafana_data:/var/lib/grafana
      - ./provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=m327Di#*5*sb

  monitor:
    image: monitor
    container_name: monitor
    devices:
      - /dev/gpiomem:/dev/gpiomem
    build: ./monitor
    restart: on-failure
    networks:
      - skynet
    links:
      - influxdb
    depends_on:
      - grafana
      - influxdb
    environment:
      INFLUXDB_TOKEN: WkoTClqWxUZ_zCoUn3RZsMNVehVG8MeYFy_R9yaBUEbwmxgAxvJVdIkMdHJhVmXqoJ6jJxWAJXoA3sPWgMPxKQ==
      INFLUXDB_BUCKET: temp-monitor-bucket
      INFLUXDB_ORG: temp-monitor-org

  speedtest:
    build: ./speedtest
    image: speedtest:latest
    container_name: speedtest
    networks:
      - skynet
    depends_on:
      influxdb:
        condition: service_healthy
    environment:
      INFLUXDB_TOKEN: WkoTClqWxUZ_zCoUn3RZsMNVehVG8MeYFy_R9yaBUEbwmxgAxvJVdIkMdHJhVmXqoJ6jJxWAJXoA3sPWgMPxKQ==
      INFLUXDB_BUCKET: temp-monitor-bucket
      INFLUXDB_ORG: temp-monitor-org
      SPEEDTEST_INTERVAL: 600
      INFLUXDB_URL: http://influxdb:8086
    restart: on-failure

  nmap_monitor:
    build: ./nmap
    image: nmap_monitor:latest
    container_name: nmap_monitor
    network_mode: "host"
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      NETWORK_SCAN_INTERVAL: 300
      KNOWN_DEVICES_FILE: known_devices.json
      DB_HOST: 127.0.0.1  # I can't use 'postgres' because this container will use host networking mode
      DB_PORT: 5432
      DB_NAME: networkdb
      DB_USER: postgres
      DB_PASSWORD: u29UZnMGb{w1
    restart: on-failure
    privileged: true

  postgres:
    image: postgres:15
    container_name: postgres
    restart: unless-stopped
    networks:
      - skynet
    ports:
    - "5432:5432"  # Expose Postgres on host port 5432 because of nmap_monitor being in host networking
    environment:
      - POSTGRES_USER: postgres
      - POSTGRES_PASSWORD: u29UZnMGb{w1
      - POSTGRES_DB: networkdb
    volumes:
      - pgdata:/var/lib/postgresql/data
      # Mount your init scripts so Postgres auto-runs them:
      - ./postgres:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U admin -d networkdb'"]
      interval: 10s
      timeout: 3s
      retries: 3
